#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "owl"
require "colorize"
require "thor"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

class OwlCli < Thor
  class_option :forum, type: :string, aliases: "-n", desc: "Forum name"
  class_option :json, type: :boolean, aliases: "-j", desc: "Print out in JSON"

  def initialize(args = [], local_options = {}, config = {})
    super
    @json = options[:json] || false
    @forum = Owl::Forum.new("/var/lib/owl/#{options[:forum]}") if options[:forum]
  end

  desc "topics", "List forum topics"
  def topics
    if @json
      puts JSON(@forum)
      return
    end

    meta = @forum.meta || {}
    puts
    print meta["name"].ljust(35).colorize(:light_green).bold if meta["name"]
    print "\t", meta["details"] if meta["details"]
    print "\t(C) #{meta["copyright"]}".colorize(:light_black) if meta["copyright"]
    puts

    parts = meta["parts"] || {}
    @forum.each do |id, topic|
      if (part = parts[id])
        print part["name"].ljust(35).colorize(:light_green).underline if part["name"]
        print "\t", part["details"].colorize(:light_black) if part["details"]
        puts
      end

      len = topic.name.length + topic.id.to_s.length
      print topic.name.colorize(:light_yellow).bold
      print ('.' * (35 - len)).colorize(:light_black).bold
      print topic.id.to_s.colorize(:light_blue).italic
      print "\t", topic.meta["details"].colorize(:light_black) if topic.meta["details"]
      puts

      subparts = topic.meta["parts"] || {}
      topic.each do |subid, sub|
        if (part = subparts[subid])
          print "\t", (part["name"] || "").ljust(27, '-').colorize(:light_black).bold
          print "\t", part["details"].colorize(:light_black) if part["details"]
          puts
        end

        id = "#{topic.id}.#{subid}"
        len = sub.name.length + id.length
        print "\t", sub.name
        print ('.' * (27 - len)).colorize(:light_black)
        print id.colorize(:light_blue).italic
        print "\t", sub.meta["details"].colorize(:light_black) if sub.meta["details"]
        puts

        # sub.each_value do |post|
        #  puts "\t\t#{post.meta}"
        # end
      end
      puts
    end
  end
end

OwlCli.start
